# Example YAML to get you started quickly.
# Be aware that YAML has indentation based scoping.
# Code completion support is available so start typing for available options.
swagger: '2.0'

# This is your document metadata
info:
  version: "1.0"
  title: Step Fighterz REST API

################################################################################
#                                           Paths                              #
################################################################################

          

paths:
  # This is a path endpoint. Change it.
  /fighter/{userId}:
    # This is a HTTP operation
    get:
      # Describe this verb here. Note: you can use markdown
      description: |
        Gets `User` objects containing the profile of a user and it's stats
      # This is array of GET operation parameters:
      parameters:
        # An example parameter that is in query and is required
        -
          name: userId
          in: path
          description: The user's Id
          required: true
          type: string
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description: Successful response
          # A schema describing your response object.
          # Use JSON Schema format
          schema:
            $ref: '#/definitions/User'


  /fighter:
    post:
      summary: create a fighter
      description: |
        create a fighter
      responses:
        200:
          description: OK
  
  /versus:
    post:
      summary: Create a single versus battle  
      description: Create a single versus battle
      responses:
        200:
          description: OK
  
  /versus/{versusId}:
    get:
      summary: get a versus 
      description: get a versus
      parameters:
      # An example parameter that is in query and is required
        -
          name: versusId
          in: path
          description: The versus Id
          required: true
          type: string
      responses:
        200:
          description: OK
    
  /versus/{versusId}/leftcorner/{fighterId}:
    put:
      summary: add a fighter to the left corner 
      description: add a fighter to a left corner
      parameters:
      # An example parameter that is in query and is required
        -
          name: versusId
          in: path
          description: The versus's Id
          required: true
          type: string
        - name: fighterId
          in: path
          description: The fighter's Id
          required: true
          type: string
      responses:
        200:
          description: OK
    
  /versus/{versusId}/rightcorner/{fighterId}:
    put:
      summary: add a fighter to the right corner 
      description: add a fighter to a right corner
      parameters:
      # An example parameter that is in query and is required
        -
          name: versusId
          in: path
          description: The versus's Id
          required: true
          type: string
        -
          name: fighterId
          in: path
          description: The fighter's Id
          required: true
          type: string
      responses:
        200:
          description: OK
          
    
  /brawl:
    post:
      summary: create a brawl (aka armageddon or seven to Smoke) 
      description: create a brawl (aka armageddon)
      responses:
        200:
          description: OK
    
  /brawl/{brawlId}:
    get:
      summary: get a brawlId 
      description: get a brawlId
      parameters:
      # An example parameter that is in query and is required
        -
          name: brawlId
          in: path
          description: The brawl's Id
          required: true
          type: string
      responses:
        200:
          description: OK
  
  
  /tournament:
    post:
      summary: Create a tournament.
      description: Create a tournament. 
      responses:
        200:
          description: OK
    
  /tournament/{tournamentId}:
    get:
      summary: retrieve a tournament
      description: retrieve a tournament 
      parameters:
      # An example parameter that is in query and is required
        -
          name: tournamentId
          in: path
          description: The tournament's Id
          required: true
          type: string
      responses:
        200:
          description: OK
  
  /tournament/{tournamentId}/knockoutstage:
    post:
      summary: add a knockout stage to the tournament.
      description: add a knowckout stage to the tournament.
      parameters:
      # An example parameter that is in query and is required
        -
          name: tournamentId
          in: path
          description: The tournament's Id
          required: true
          type: string
      responses:
        200:
          description: OK
    
  
################################################################################
#                                 Definitions                                  #
################################################################################
definitions:
  User:
    type: object
    properties:
      userId:
        type: integer
      profile:
        $ref: '#/definitions/Profile'
      stats:
        $ref: '#/definitions/Stats'
    
  Profile:
    type: object
    properties:
      username:
        type: string
      groups:
        type: array
        items:  
          $ref: '#/definitions/Group'
      city:
        $ref: '#/definitions/City'
      country:
        $ref: '#/definitions/Country'
      picture_url:
        type: string
        
  Group:
    type: object
    properties:
      groupId:
        type: integer
      groupName:
        type: string
    
  Stats:
    type: object
    properties:
      rank:
        type: string
      total-global-xp:
        type: integer
      total-personal-xp:
        type: integer
      categories:
        type: array
        items:
          $ref: '#/definitions/Category'
    
  Category:
    type: object
    properties:
      categoryId:
        type: integer
      categoryName:
        type: string
      global-xp:
        type: integer
      personal-xp:
        type: integer
    
  City:
    type: object
    properties:
      cityId:
        type: integer
      cityName:
        type: string
    
  Country:
    type: object
    properties:
      countryId:
        type: integer
      countryName:
        type: string
